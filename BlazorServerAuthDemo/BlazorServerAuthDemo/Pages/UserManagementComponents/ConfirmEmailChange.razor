@page "/confirmchangeemail/{token}"

@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using Microsoft.AspNetCore.WebUtilities;
@using System.ComponentModel.DataAnnotations;

@inject AppAuthenticationStateProvider WebsiteAuthenticator
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager

<h3>ConfirmEmailChange</h3>

<EditForm Model="_emailInputForm" OnValidSubmit=@Update OnInvalidSubmit=@ClearErrorText>
    <div class="row">
        <div class="col-6">
            <DataAnnotationsValidator />

            <div class="form-group row">
                <label class="col-form-label">
                    Email:
                </label>
                <div class="col-sm-10">
                    <InputText @bind-Value="_emailInputForm.Email" class="form-control" id="Email"></InputText>
                </div>
            </div>
            <div class="form-group mt-2">
                <button class="btn btn-primary" type="submit">Update</button>
            </div>
        </div>
        <div class="col-6">
            <ValidationSummary />
        </div>

    </div>
</EditForm>

@if (!string.IsNullOrEmpty(_errorText))
{
    <div class="row bg-danger text-dark" style="margin-top:10px; height:40px">
        <label class="p-2">@_errorText</label>
    </div>
}

@code {
    [Parameter]
    public string Token { get; set; }

    private EmailInputForm _emailInputForm;
    private IdentityUser _user;
    private string _errorText;

    protected override async Task OnInitializedAsync()
    {
        _emailInputForm = new();
        var authUser = (await WebsiteAuthenticator.GetAuthenticationStateAsync()).User;
        _user = await UserManager.GetUserAsync(authUser);
    }

    private async Task Update()
    {
        ClearErrorText();
        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Token));
        var result = await UserManager.ChangeEmailAsync(_user, _emailInputForm.Email, code);
        if (!result.Succeeded)
        {
            _errorText = "Error changing email.";
            return;
        }
        var setUserNameResult = await UserManager.SetUserNameAsync(_user, _emailInputForm.Email);
        if (!setUserNameResult.Succeeded)
        {
            _errorText = "Error changing user name (email).";
            return;
        }
        await WebsiteAuthenticator.SetAuthenticationState(_user);
        NavigationManager.NavigateTo("/");

    }

    private void ClearErrorText() => _errorText = null;
    

    private class EmailInputForm
    {
        [EmailAddress]
        public string Email{ get; set; }
    }
}
