@inject AppAuthenticationStateProvider AppAuthenticationStateProvider
@inject NavigationManager NavigationManager
@page "/login"

<h1>Login</h1>

<AuthorizeView Context="Account">
    <NotAuthorized>
        <EditForm Model="LoginFormModel" OnValidSubmit=@TryLogin>
            <div class="form-group">
                <label class="col-form-label">
                    Email:
                </label>
                <div class="col-sm-10">
                    <InputText class="form-control" @bind-Value="LoginFormModel.Email"></InputText>
                </div>
            </div>
            <div class="form-group">
                <label class="col-form-label">
                    Password:
                </label>
                <div class="col-sm-10">
                    <InputText class="form-control" type="password" @bind-Value="LoginFormModel.Password"></InputText>
                </div>
            </div>
            <div class="form-group mt-2">
                <button class="btn btn-primary" disabled=@_isButtonDisabled type="submit">Login</button>
            </div>
        </EditForm>
        @if (!_isLoginSuccessed)
        {
            <div class="col-sm-10 bg-danger text-dark" style="margin-top:10px; height:40px">
                <label class="p-2">Incorrect login or password!</label>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginFormModel LoginFormModel { get; set; } = new();
    private bool _isButtonDisabled = false;
    private bool _isLoginSuccessed = true;

    private async Task TryLogin()
    {
        _isButtonDisabled = true;
        _isLoginSuccessed = await AppAuthenticationStateProvider.LoginAsync(LoginFormModel);
        if (_isLoginSuccessed)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _isButtonDisabled = false;
        }
    }
}