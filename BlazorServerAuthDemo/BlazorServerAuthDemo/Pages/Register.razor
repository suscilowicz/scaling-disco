@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations;
@inject UserManager<IdentityUser> UserManager

<h1>Register</h1>
<AuthorizeView Context="Account">
    <NotAuthorized>
        <EditForm Model="RegisterForm" OnValidSubmit=@TryRegister OnInvalidSubmit=@ClearRegisterInfo>
            <div class ="form-group">
                <label class="col-form-label">
                    Email:
                </label>
                <div class="col-sm-10">
                    <InputText class="form-control" @bind-Value="RegisterForm.Email"></InputText>
                </div>
            </div>
            <div class="form-group">
                <label class="col-form-label">
                    Password:
                </label>
                <div class="col-sm-10">
                    <InputText class="form-control" type="password" @bind-Value="RegisterForm.Password"></InputText>
                </div>
            </div>
            <div class="form-group">
                <label class="col-form-label">
                    Confirm Password:
                </label>
                <div class="col-sm-10">
                    <InputText class="form-control" type="password" @bind-Value="RegisterForm.Password2"></InputText>
                </div>
            </div>
            <div class="form-group mt-2">
                <button class="btn btn-primary" type="submit">Register</button>
            </div>
        </EditForm>
        @if (_isRegistered.HasValue && _isRegistered.Value)
        {
        <div class="row bg-success text-white" style="margin-top:10px; height:40px">
            <label class="p-2">User created.</label>
        </div>
        }

        @if (_isRegistered.HasValue && !_isRegistered.Value)
        {
        <div class="row bg-danger text-dark" style="margin-top:10px; height:40px">
            <label class="p-2">Something went wrong...</label>
        </div>
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private RegisterFormModel RegisterForm { get; set; } = new();
    private bool? _isRegistered;

    private async Task TryRegister()
    {
        var user = new IdentityUser();
        await UserManager.SetUserNameAsync(user, RegisterForm.Email);
        await UserManager.SetEmailAsync(user, RegisterForm.Email);
        var result = await UserManager.CreateAsync(user, RegisterForm.Password);
        _isRegistered = result.Succeeded;
    }

    private void ClearRegisterInfo()
    {
        _isRegistered = null;
    }

    private class RegisterFormModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The new password and confirmation password do not match.")]
        public string Password2 { get; set; }

    }
}