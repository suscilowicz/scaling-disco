@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject UserManager<IdentityUser> UserManager
@inject AppAuthenticationStateProvider AppAuthenticationStateProvider

<h3>Change password</h3>

<EditForm Model="_changePasswordForm" OnValidSubmit=@ChangePassword OnInvalidSubmit=@ClearNotify>
    <div class="row">
        <div class="col-6">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label class="col-form-label">
                    Current password:
                </label>
                <div class="col-sm-10">
                    <InputText type="password" @bind-Value="_changePasswordForm.OldPassword" class="form-control" id="OldPassword"> </InputText>
                </div>
            </div>
            <div class="form-group">
                <label class="col-form-label">
                    New password:
                </label>
                <div class="col-sm-10">
                    <InputText type="password" @bind-Value="_changePasswordForm.NewPassword" class="form-control" id="NewPassword"></InputText>
                </div>
            </div>
            <div class="form-group">
                <label class="col-form-label">
                    Confirm new password:
                </label>
                <div class="col-sm-10">
                    <InputText type="password" @bind-Value="_changePasswordForm.ConfirmPassword" class="form-control" id="ConfirmPassword"></InputText>
                </div>
            </div>
            <div class="form-group mt-2">
                <button class="btn btn-primary" type="submit">Update</button>
            </div>
        </div>
        <div class="col-6">
            @if (_errors.Any())
            {
                <ul class="validation-errors mt-0">
                    @foreach (var error in _errors)
                    {
                        <li class="validation-message">@error</li>
                    }
                </ul>
            }
            <ValidationSummary />
        </div>

    </div>
</EditForm>

@if (_isUpdated.HasValue && _isUpdated.Value)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">Password updated.</label>
    </div>
}

@if (_isUpdated.HasValue && !_isUpdated.Value)
{
    <div class="row bg-danger text-dark" style="margin-top:10px; height:40px">
        <label class="p-2">Something went wrong...</label>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        _errors = new();
        _changePasswordForm = new();
        _user = AppAuthenticationStateProvider.CurrentUser;
    }

    private ChangePasswordForm _changePasswordForm;
    private bool? _isUpdated;
    private IdentityUser _user;
    private List<string> _errors;

    private class ChangePasswordForm
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

    }

    private async Task ChangePassword()
    {
        ClearNotify();
        var isPasswordCorrect = await UserManager.CheckPasswordAsync(_user, _changePasswordForm.OldPassword);
        if (isPasswordCorrect)
        {
            var changePasswordResult = await UserManager.ChangePasswordAsync(_user, _changePasswordForm.OldPassword, _changePasswordForm.NewPassword);
            _isUpdated = changePasswordResult.Succeeded;
            foreach (var error in changePasswordResult.Errors)
            {
                _errors.Add(error.Description);
            }
            await AppAuthenticationStateProvider.SetAuthenticationState(_user);
        }
        else
        {
            _errors.Add("Password is incorrect!");
        }
    }

    private void ClearNotify()
    {
        _errors.Clear();
        _isUpdated = null;
    }
}
